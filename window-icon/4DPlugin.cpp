/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Window Icon
 #	author : miyako
 #	2016/02/14
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Window Icon

		case 1 :
			WINDOW_SET_ICON(pResult, pParams);
			break;

		case 2 :
			WINDOW_Get_icon(pResult, pParams);
			break;

	}
}

// ---------------------------------- Window Icon ---------------------------------

WindowRef PA_GetWindowRef(int winId)
{    
    return (WindowRef)PA_GetWindowPtr(reinterpret_cast<PA_WindowRef>(winId));  
}

NSWindow *PA_GetWindowRef64(int winId)
{
	//EX_GET_HWND has been fixed in 15R3 to return a NSWindow* on mac 64bit.
	//http://forums.4d.fr/Post/EN/15872830/1/17032044
	
	PA_ulong32 version = (PA_Get4DVersion() & 0x0000FFFF);
//	int minor = version & 0x000F;
	int r = (version & 0x00F0) >> 4;
	int major = (version & 0xFF00) >> 8;
	if ((major >=0x15) && (r >= 3))
	{
		return (NSWindow *)PA_GetWindowPtr(reinterpret_cast<NSWindow *>(winId));
	}
	return 0;
}

#if VERSIONMAC
NSString *generateUuid(){
#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 1080
    return [[[NSUUID UUID]UUIDString]stringByReplacingOccurrencesOfString:@"-" withString:@""];
#else
    CFUUIDRef uuid = CFUUIDCreate(kCFAllocatorDefault);
    NSString *uuid_str = (NSString *)CFUUIDCreateString(kCFAllocatorDefault, uuid);
    NSString *result = ([uuid_str stringByReplacingOccurrencesOfString:@"-" withString:@""]);
    [uuid_str release];
    return result;
#endif
}
#endif

void WINDOW_SET_ICON(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	//http://stackoverflow.com/questions/18861046/how-to-determine-if-compiling-for-64-bit-ios-in-xcode
#if CGFLOAT_IS_DOUBLE
	NSWindow *window = PA_GetWindowRef64(Param1.getIntValue());
	if (window)
	{
		PA_Picture p = *(PA_Picture *)(pParams[1]);
		CGImageRef cgImage = (CGImageRef)PA_CreateNativePictureForScreen(p);
		NSImage *nsImage = [[NSImage alloc]initWithCGImage:cgImage size:NSZeroSize];
		NSURL *url = [[NSURL alloc]initWithString:@"file://"];
		[window setRepresentedURL:url];
		[url release];
		NSButton *button = [window standardWindowButton:NSWindowDocumentIconButton];
		[button setImage:nsImage];
		[nsImage release];
		CFRelease(cgImage);
	}
#else
		WindowRef windowRef = PA_GetWindowRef(Param1.getIntValue());
    PA_Picture p = *(PA_Picture *)(pParams[1]);
    CGImageRef image = (CGImageRef)PA_CreateNativePictureForScreen(p);
    if (image)
		{
			NSString *temporaryIconPath = [NSTemporaryDirectory() stringByAppendingPathComponent:[generateUuid()stringByAppendingString:@".icns"]];
			NSURL *url = [NSURL fileURLWithPath:temporaryIconPath];
			if (url)
			{
				CGImageDestinationRef destination = CGImageDestinationCreateWithURL((CFURLRef)url, kUTTypeAppleICNS, 1, NULL);
				if (destination)
				{
					CFMutableDictionaryRef properties = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, NULL, NULL);
					CGImageDestinationAddImage(destination, image, properties);
					CGImageDestinationFinalize(destination);	
					CFRelease(destination);
					CFRelease(properties); 
					FSRef fsRef;
					IconRef iconRef;
					if (CFURLGetFSRef((CFURLRef)url, &fsRef))
					{
						RegisterIconRefFromFSRef('cust', '4D65', &fsRef, &iconRef);
						SetWindowProxyIcon(windowRef, iconRef);
						ReleaseIconRef(iconRef);
						UnregisterIconRef('cust', '4D65');
					}
				}
			}
			CFRelease(image);
    }
#endif
}

void WINDOW_Get_icon(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;

	Param1.fromParamAtIndex(pParams, 1);

#if CGFLOAT_IS_DOUBLE
	NSWindow *window = PA_GetWindowRef64(Param1.getIntValue());
	if (window)
	{
		NSButton *button = [window standardWindowButton:NSWindowDocumentIconButton];
		NSImage *icon = [button image];
		if (icon)
		{
			//return picture without memory leak; avoid the use of - TIFFRepresentation
			NSRect imageRect = NSMakeRect(0, 0, icon.size.width , icon.size.height);
			CGImageRef image = [icon CGImageForProposedRect:(NSRect *)&imageRect context:NULL hints:NULL];
			CFMutableDataRef data = CFDataCreateMutable(kCFAllocatorDefault, 0);
			CGImageDestinationRef destination = CGImageDestinationCreateWithData(data, kUTTypeTIFF, 1, NULL);
			CFMutableDictionaryRef properties = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, NULL, NULL);
			CGImageDestinationAddImage(destination, image, properties);
			CGImageDestinationFinalize(destination);
			PA_Picture picture = PA_CreatePicture((void *)CFDataGetBytePtr(data), CFDataGetLength(data));
			*(PA_Picture*) pResult = picture;
			CFRelease(destination);
			CFRelease(properties);
			CFRelease(data);
		}
	}
#else
#define WINDOW_ICON_SIZE 128
	WindowRef windowRef = PA_GetWindowRef(Param1.getIntValue());
	IconRef iconRef;
	if (GetWindowProxyIcon(windowRef, &iconRef) != errWindowDoesNotHaveProxy)
	{
		NSImage *largeIcon = [[NSImage alloc]initWithIconRef:iconRef];
		if (largeIcon)
		{
			[largeIcon setScalesWhenResized:YES];
			NSImage *icon = [[NSImage alloc]initWithSize:NSMakeSize(WINDOW_ICON_SIZE, WINDOW_ICON_SIZE)];
			[icon lockFocus];
			[largeIcon setSize:NSMakeSize(WINDOW_ICON_SIZE, WINDOW_ICON_SIZE)];
			[[NSGraphicsContext currentContext]setImageInterpolation:NSImageInterpolationHigh];
			[largeIcon compositeToPoint:NSZeroPoint operation:NSCompositeCopy];
			[icon unlockFocus];
			[largeIcon release];
			//return picture without memory leak; avoid the use of - TIFFRepresentation
			NSRect imageRect = NSMakeRect(0, 0, icon.size.width/2, icon.size.height/2);
			CGImageRef image = [icon CGImageForProposedRect:(NSRect *)&imageRect context:NULL hints:NULL];
			CFMutableDataRef data = CFDataCreateMutable(kCFAllocatorDefault, 0);
			CGImageDestinationRef destination = CGImageDestinationCreateWithData(data, kUTTypeTIFF, 1, NULL);
			CFMutableDictionaryRef properties = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, NULL, NULL);
			CGImageDestinationAddImage(destination, image, properties);
			CGImageDestinationFinalize(destination);
			PA_Picture picture = PA_CreatePicture((void *)CFDataGetBytePtr(data), CFDataGetLength(data));
			*(PA_Picture*) pResult = picture;
			CFRelease(destination);
			CFRelease(properties);
			CFRelease(data);
			[icon release];
		}
	}
#endif
}

